package xxfin.oracle.apps.ap.iou.server;

import oracle.apps.fnd.framework.server.OAViewRowImpl;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class iouExchangeVORowImpl extends OAViewRowImpl
{
  public static final int FROMCURRENCY = 0;
  public static final int TOCURRENCY = 1;
  public static final int CONVERSIONDATE = 2;
  public static final int CONVERSIONTYPE = 3;
  public static final int CONVERSIONRATE = 4;
  public static final int AMT = 5;

  /**This is the default constructor (do not remove)
   */
  public iouExchangeVORowImpl()
  {
  }

  /**Gets the attribute value for the calculated attribute FromCurrency
   */
  public String getFromCurrency()
  {
    return (String) getAttributeInternal(FROMCURRENCY);
  }

  /**Sets <code>value</code> as the attribute value for the calculated attribute FromCurrency
   */
  public void setFromCurrency(String value)
  {
    setAttributeInternal(FROMCURRENCY, value);
  }

  /**Gets the attribute value for the calculated attribute ToCurrency
   */
  public String getToCurrency()
  {
    return (String) getAttributeInternal(TOCURRENCY);
  }

  /**Sets <code>value</code> as the attribute value for the calculated attribute ToCurrency
   */
  public void setToCurrency(String value)
  {
    setAttributeInternal(TOCURRENCY, value);
  }

  /**Gets the attribute value for the calculated attribute ConversionDate
   */
  public Date getConversionDate()
  {
    return (Date) getAttributeInternal(CONVERSIONDATE);
  }

  /**Sets <code>value</code> as the attribute value for the calculated attribute ConversionDate
   */
  public void setConversionDate(Date value)
  {
    setAttributeInternal(CONVERSIONDATE, value);
  }

  /**Gets the attribute value for the calculated attribute ConversionType
   */
  public String getConversionType()
  {
    return (String) getAttributeInternal(CONVERSIONTYPE);
  }

  /**Sets <code>value</code> as the attribute value for the calculated attribute ConversionType
   */
  public void setConversionType(String value)
  {
    setAttributeInternal(CONVERSIONTYPE, value);
  }

  /**Gets the attribute value for the calculated attribute ConversionRate
   */
  public Number getConversionRate()
  {
    return (Number) getAttributeInternal(CONVERSIONRATE);
  }

  /**Sets <code>value</code> as the attribute value for the calculated attribute ConversionRate
   */
  public void setConversionRate(Number value)
  {
    setAttributeInternal(CONVERSIONRATE, value);
  }

  /**getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, 
                                         AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
    {
    case FROMCURRENCY:
      return getFromCurrency();
    case TOCURRENCY:
      return getToCurrency();
    case CONVERSIONDATE:
      return getConversionDate();
    case CONVERSIONTYPE:
      return getConversionType();
    case CONVERSIONRATE:
      return getConversionRate();
    case AMT:
      return getAmt();
    default:
      return super.getAttrInvokeAccessor(index, attrDef);
    }
  }

  /**setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, 
                                       AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
    {
    case FROMCURRENCY:
      setFromCurrency((String)value);
      return;
    case TOCURRENCY:
      setToCurrency((String)value);
      return;
    case CONVERSIONDATE:
      setConversionDate((Date)value);
      return;
    case CONVERSIONTYPE:
      setConversionType((String)value);
      return;
    case CONVERSIONRATE:
      setConversionRate((Number)value);
      return;
    case AMT:
      setAmt((Number)value);
      return;
    default:
      super.setAttrInvokeAccessor(index, value, attrDef);
      return;
    }
  }

  /**Gets the attribute value for the calculated attribute Amt
   */
  public Number getAmt()
  {
    return (Number) getAttributeInternal(AMT);
  }

  /**Sets <code>value</code> as the attribute value for the calculated attribute Amt
   */
  public void setAmt(Number value)
  {
    setAttributeInternal(AMT, value);
  }
}
